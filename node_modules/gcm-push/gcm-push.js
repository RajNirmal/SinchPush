(function() {
	var Push, request;
	request = require('request');

	Push = (function() { 
		function Push(apiKey) 
		{
			// set constants
			this.SERVER_ADDR = 'https://android.googleapis.com/gcm/send';

			if (!apiKey)
				throw new Error('Missing argument; apiKey');

			// set api key
			this.key = apiKey;
		}

		Push.prototype = {
			send: function(data, callback) 
			{
				var params = 
				{
					url: this.SERVER_ADDR,

					headers: {
						'Authorization': 'key=' + this.key,
					},

					json: data
				};

				request.post(params, function(error, response, body) 
				{
					if (error)
					{
						if (callback)
							callback(error, response.statusCode);
					}

					switch (response.statusCode)
					{
						// 200: success
						case 200:
							if (body && body.success && body.failure)
							{
								var total = body.success + body.failure;

								if (callback)
									callback(body.success + ' / ' + total + ' messages sent successfully', response.statusCode);
							}
							else
							{
								if (callback)
									callback('All messages sent successfully', response.statusCode);
							}
						break;

						// 400: could not parse json
						case 400:
							throw new Error('GCM could not parse the JSON sent', response.unauthorized);
						break;

						// 401: unauthorized
						case 401:
							throw new Error('GCM rejected sent API key, unauthorized', response.statusCode)
						break;

						// unexpected error
						default:
							throw new Error('GCM rejected the messages for unexpected reason', response.statusCode);
						break;
					}
				});
			},

			/*
				notifyDevices can be used to send message to multiple devices

				@param device_ids array : array of devices register ids
				@param title string : title for the message
				@param message string : content of the message
				@param soundUri string : path to a sound file
				@param callback function : callback that will be called after resulting in send
			*/
			notifyDevices: function(device_ids, title, message, soundUri, callback)
			{
				var data = 
				{
					'registration_ids': device_ids,
					'data': {
						'title': title,
						'message': message
					}
				};

				if (soundUri)
					data.data.sound = soundUri;

				this.send(data, callback);
			},

			/*
				notifyDevice can be used to send message to single devices

				@param device_ids string : device register id
				@param title string : title for the message
				@param message string : content of the message
				@param soundUri string : path to a sound file
				@param callback function : callback that will be called after resulting in send
			*/
			notifyDevice: function(device_id, title, message, soundUri, callback)
			{
				this.notifyDevices([device_id], title, message, soundUri, callback);
			}
		};

		return Push;
	})();

	module.exports = Push;
}).call(this);